--- src/Terraria/Terraria/Social/Steam/WorkshopHelper.cs
+++ src/tModLoader/Terraria/Social/Steam/WorkshopHelper.cs
@@ -1,14 +_,16 @@
 using Steamworks;
 using System;
 using System.Collections.Generic;
+using System.Collections.Specialized;
 using System.IO;
 using Terraria.IO;
+using Terraria.ModLoader;
 using Terraria.Social.Base;
 using Terraria.Utilities;
 
 namespace Terraria.Social.Steam
 {
-	public class WorkshopHelper
+	public partial class WorkshopHelper
 	{
 		public class UGCBased
 		{
@@ -20,6 +_,7 @@
 				public string[] Tags;
 				public string Title;
 				public ERemoteStoragePublishedFileVisibility? Visibility;
+				public NameValueCollection BuildData;
 			}
 
 			public class Downloader
@@ -34,26 +_,49 @@
 					private set;
 				}
 
+				public List<string> ModPaths {
+					get;
+					private set;
+				}
+
 				public Downloader() {
 					ResourcePackPaths = new List<string>();
 					WorldPaths = new List<string>();
+					ModPaths = new List<string>();
 				}
 
 				public static Downloader Create() => new Downloader();
 
 				public List<string> GetListOfSubscribedItemsPaths() {
+					List<string> list = new List<string>();
+
+					var array = new AppId_t[] { ModLoader.Engine.Steam.TerrariaAppId_t, ModLoader.Engine.Steam.TMLAppID_t };
+					foreach (var app in array) {
+						SteamApps.GetAppInstallDir(app, out string installLoc, 1000);
+						var workshopLoc = Path.Combine(Directory.GetParent(Directory.GetParent(installLoc).ToString()).ToString(),"workshop","content", app.m_AppId.ToString());
+						if (Directory.Exists(workshopLoc)) {
+							list.AddRange(Directory.EnumerateDirectories(workshopLoc));
+						}
+					}
+
+					string gogDirectory = Path.Combine(Directory.GetCurrentDirectory(), "steamapps", "workshop", "content", ModManager.thisApp.ToString());
+					if (Directory.Exists(gogDirectory)) {
+						list.AddRange(Directory.EnumerateDirectories(gogDirectory));
+					}
+
+					/*
 					PublishedFileId_t[] array = new PublishedFileId_t[SteamUGC.GetNumSubscribedItems()];
 					SteamUGC.GetSubscribedItems(array, (uint)array.Length);
 					ulong punSizeOnDisk = 0uL;
 					string pchFolder = string.Empty;
 					uint punTimeStamp = 0u;
-					List<string> list = new List<string>();
+					
 					PublishedFileId_t[] array2 = array;
 					for (int i = 0; i < array2.Length; i++) {
 						if (SteamUGC.GetItemInstallInfo(array2[i], out punSizeOnDisk, out pchFolder, 1024u, out punTimeStamp))
 							list.Add(pchFolder);
 					}
-
+					*/
 					return list;
 				}
 
@@ -75,6 +_,9 @@
 							if (!(a == "World")) {
 								if (a == "ResourcePack")
 									ResourcePackPaths.Add(listOfSubscribedItemsPath);
+								else if (a == "Mod") {
+									ModPaths.Add(listOfSubscribedItemsPath);
+								}
 							}
 							else {
 								WorldPaths.Add(listOfSubscribedItemsPath);
@@ -159,7 +_,7 @@
 				private FinishedPublishingAction _endAction;
 				private WorkshopIssueReporter _issueReporter;
 
-				public void PublishContent(PublishedItemsFinder finder, WorkshopIssueReporter issueReporter, FinishedPublishingAction endAction, string itemTitle, string itemDescription, string contentFolderPath, string previewImagePath, WorkshopItemPublicSettingId publicity, string[] tags) {
+				public void PublishContent(PublishedItemsFinder finder, WorkshopIssueReporter issueReporter, FinishedPublishingAction endAction, string itemTitle, string itemDescription, string contentFolderPath, string previewImagePath, WorkshopItemPublicSettingId publicity, string[] tags, NameValueCollection buildData = null) {
 					_issueReporter = issueReporter;
 					_endAction = endAction;
 					_createItemHook = CallResult<CreateItemResult_t>.Create(CreateItemResult);
@@ -171,7 +_,8 @@
 						ContentFolderPath = contentFolderPath,
 						Tags = tags,
 						PreviewImagePath = previewImagePath,
-						Visibility = visibility
+						Visibility = visibility,
+						BuildData = buildData
 					};
 
 					ulong? num = null;
@@ -253,8 +_,40 @@
 					if (_entryData.Visibility.HasValue)
 						SteamUGC.SetItemVisibility(uGCUpdateHandle_t, _entryData.Visibility.Value);
 
+					string patchNotes = "";
+					if (_entryData.BuildData != null) {
+						SteamUGC.RemoveItemKeyValueTags(uGCUpdateHandle_t, "author");
+						SteamUGC.RemoveItemKeyValueTags(uGCUpdateHandle_t, "modside");
+						SteamUGC.RemoveItemKeyValueTags(uGCUpdateHandle_t, "homepage");
+						SteamUGC.RemoveItemKeyValueTags(uGCUpdateHandle_t, "modloaderversion");
+						SteamUGC.RemoveItemKeyValueTags(uGCUpdateHandle_t, "version");
+
+						SteamUGC.AddItemKeyValueTag(uGCUpdateHandle_t, "author", _entryData.BuildData["author"]);
+						SteamUGC.AddItemKeyValueTag(uGCUpdateHandle_t, "modside", _entryData.BuildData["modside"]);
+						SteamUGC.AddItemKeyValueTag(uGCUpdateHandle_t, "homepage", _entryData.BuildData["homepage"]);
+						SteamUGC.AddItemKeyValueTag(uGCUpdateHandle_t, "modloaderversion", _entryData.BuildData["modloaderversion"]);
+						SteamUGC.AddItemKeyValueTag(uGCUpdateHandle_t, "version", _entryData.BuildData["version"]);
+						
+						patchNotes = _entryData.BuildData["version"] + " learn more @" + _entryData.BuildData["homepage"];
+						SteamUGC.SetItemMetadata(uGCUpdateHandle_t, _entryData.BuildData["name"]);
+
+						string refs = _entryData.BuildData["modreferences"];
+						if (!String.IsNullOrEmpty(refs)) {
+							string[] dependencies = refs.Split(",", StringSplitOptions.TrimEntries);
+							foreach (var dependency in dependencies) {
+								try {
+									var child = new PublishedFileId_t(uint.Parse(dependency));
+									SteamUGC.AddDependency(_publishedFileID, child);
+								}
+								catch (Exception) {
+									Logging.tML.Error("Failed to add dependency: " + dependency + " to " + _publishedFileID);
+								}
+							}
+						}
+					}
+
 					CoreSocialModule.SetSkipPulsing(shouldSkipPausing: true);
-					SteamAPICall_t hAPICall = SteamUGC.SubmitItemUpdate(uGCUpdateHandle_t, "");
+					SteamAPICall_t hAPICall = SteamUGC.SubmitItemUpdate(uGCUpdateHandle_t, patchNotes);
 					_updateHandle = uGCUpdateHandle_t;
 					_updateItemHook.Set(hAPICall, UpdateItemResult);
 					CoreSocialModule.SetSkipPulsing(shouldSkipPausing: false);
